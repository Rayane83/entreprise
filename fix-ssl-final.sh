#!/bin/bash

# üö® Correction SSL FINALE - Variables domaine corrig√©es
# Usage: ./fix-ssl-final.sh

set -e

DOMAIN="flashbackfa-entreprise.fr" 
DEST_PATH="/var/www/flashbackfa-entreprise.fr"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

log "üö® Correction SSL finale pour $DOMAIN..."

# 1. V√©rifier l'√©tat actuel
log "üîç V√©rification de l'√©tat actuel..."

# Test du backend
if curl -f -s "http://localhost:8001/api/" > /dev/null; then
    log "‚úÖ Backend op√©rationnel"
else
    error "‚ùå Backend non op√©rationnel - V√©rifiez PM2"
fi

# Test de la configuration Nginx
if sudo nginx -t > /dev/null 2>&1; then
    log "‚úÖ Configuration Nginx valide"
else
    error "‚ùå Configuration Nginx invalide"
fi

# 2. V√©rifier la r√©solution DNS
log "üåê Test de r√©solution DNS..."
if nslookup $DOMAIN > /dev/null 2>&1; then
    log "‚úÖ DNS r√©solu pour $DOMAIN"
    
    # Tenter la g√©n√©ration SSL avec le bon domaine
    log "üîí G√©n√©ration SSL pour $DOMAIN uniquement..."
    
    # Essayer avec le domaine principal seulement d'abord
    sudo certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email "admin@$DOMAIN"
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Certificat SSL g√©n√©r√© pour $DOMAIN"
        
        # Ajouter www si possible
        log "üîí Ajout du sous-domaine www..."
        sudo certbot --nginx -d "$DOMAIN" -d "www.$DOMAIN" --expand --non-interactive --agree-tos --email "admin@$DOMAIN"
        
        if [ $? -eq 0 ]; then
            log "‚úÖ Certificat SSL √©tendu pour www.$DOMAIN"
        else
            warn "‚ö†Ô∏è www.$DOMAIN non ajout√© (normal si DNS non configur√©)"
        fi
        
    else
        error "‚ùå √âchec g√©n√©ration SSL pour $DOMAIN"
    fi
    
else
    warn "‚ö†Ô∏è DNS non r√©solu pour $DOMAIN"
    log "üìù Votre site est accessible en HTTP : http://$DOMAIN"
    log "üîß Pour configurer SSL apr√®s propagation DNS :"
    log "    sudo certbot --nginx -d $DOMAIN"
fi

# 3. Configuration finale et optimisation
log "‚öôÔ∏è Optimisation finale..."

# S'assurer que PM2 tourne correctement
pm2 status | grep -q "flashbackfa-backend" || {
    log "üîÑ Red√©marrage PM2..."
    cd "$DEST_PATH"
    pm2 start ecosystem.config.js
    pm2 save
}

# Optimiser la configuration Nginx si SSL actif
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    log "üîß Application des optimisations HTTPS..."
    
    # La configuration a d√©j√† √©t√© modifi√©e par Certbot, on ajoute juste les headers de s√©curit√©
    sudo tee -a /etc/nginx/sites-available/flashbackfa-entreprise > /dev/null << EOF

# Headers de s√©curit√© additionnels (ajout√©s automatiquement)
# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
EOF
    
    # Test et reload
    sudo nginx -t && sudo systemctl reload nginx
    log "‚úÖ Configuration HTTPS optimis√©e"
fi

# 4. Tests finaux complets
log "üß™ Tests finaux complets..."

sleep 3

# Test backend
if curl -f -s "http://localhost:8001/api/" > /dev/null; then
    log "‚úÖ Backend API r√©pond"
else
    error "‚ùå Backend API ne r√©pond pas"
fi

# Test site HTTP
if curl -f -s "http://$DOMAIN/" > /dev/null 2>&1; then
    log "‚úÖ Site HTTP accessible"
    SITE_HTTP="‚úÖ http://$DOMAIN"
elif curl -f -s "http://localhost/" > /dev/null 2>&1; then
    log "‚úÖ Site accessible localement"
    SITE_HTTP="‚úÖ http://localhost (DNS en cours)"
else
    warn "‚ö†Ô∏è Site HTTP non accessible"
    SITE_HTTP="‚ö†Ô∏è En attente DNS"
fi

# Test site HTTPS
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    if curl -f -s "https://$DOMAIN/" > /dev/null 2>&1; then
        log "‚úÖ Site HTTPS accessible"
        SITE_HTTPS="‚úÖ https://$DOMAIN"
    else
        warn "‚ö†Ô∏è Site HTTPS pas encore accessible"
        SITE_HTTPS="‚ö†Ô∏è HTTPS configur√© mais pas encore accessible"
    fi
else
    SITE_HTTPS="‚ùå SSL non configur√©"
fi

# 5. R√©sum√© final avec toutes les informations
echo ""
echo "üéâ==========================================üéâ"
echo -e "${GREEN}    R√âSUM√â FINAL DE VOTRE SITE${NC}"
echo "üéâ==========================================üéâ"
echo ""

echo -e "${BLUE}üåü √âTAT DU SITE:${NC}"
echo -e "   Domain: $DOMAIN"
echo -e "   HTTP: $SITE_HTTP"
echo -e "   HTTPS: $SITE_HTTPS"
echo ""

echo -e "${BLUE}üîß SERVICES:${NC}"
PM2_STATUS=$(pm2 status 2>/dev/null | grep flashbackfa-backend | awk '{print $10}' || echo "Non d√©marr√©")
echo -e "   Backend: $PM2_STATUS"
echo -e "   Nginx: ‚úÖ Op√©rationnel"
echo -e "   SSL: $([ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ] && echo "‚úÖ Configur√©" || echo "‚ùå Non configur√©")"
echo ""

echo -e "${BLUE}‚úÖ FONCTIONNALIT√âS PRODUCTION:${NC}"
echo -e "   üîê Authentification Discord OBLIGATOIRE"
echo -e "   üìä Exports Excel (Imp√¥ts, Blanchiment, Archives, Dotations)"
echo -e "   üìã Zone copier-coller Blanchiment"
echo -e "   üé® Interface propre (sans 'Made with Emergent')"
echo -e "   üöÄ Optimis√© pour production"
echo ""

echo -e "${BLUE}üìä SURVEILLANCE:${NC}"
echo -e "   pm2 status"
echo -e "   pm2 logs flashbackfa-backend"
echo -e "   pm2 monit"
echo -e "   sudo tail -f /var/log/nginx/error.log"
echo ""

# URLs finales
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    echo -e "${GREEN}üéØ VOTRE PORTAIL ENTREPRISE EST PR√äT !${NC}"
    echo -e "${GREEN}   üîó Acc√®s s√©curis√©: https://$DOMAIN${NC}"
    echo -e "${GREEN}   üîß API: https://$DOMAIN/api/${NC}"
else
    echo -e "${GREEN}üéØ VOTRE PORTAIL ENTREPRISE EST PR√äT !${NC}"
    echo -e "${GREEN}   üîó Acc√®s: http://$DOMAIN${NC}"
    echo -e "${GREEN}   üîß API: http://$DOMAIN/api/${NC}"
    echo ""
    echo -e "${YELLOW}üìù Pour activer HTTPS apr√®s propagation DNS:${NC}"
    echo -e "   sudo certbot --nginx -d $DOMAIN"
fi

echo ""
echo -e "${GREEN}üîê Connectez-vous avec votre compte Discord du serveur Flashback Fa !${NC}"

# 6. Test final d'acc√®s et affichage du r√©sultat
echo ""
echo -e "${BLUE}üß™ TEST FINAL:${NC}"

# D√©terminer la meilleure URL
FINAL_URL=""
if curl -f -s "https://$DOMAIN/" > /dev/null 2>&1; then
    FINAL_URL="https://$DOMAIN"
    echo -e "${GREEN}‚úÖ SITE HTTPS ENTI√àREMENT OP√âRATIONNEL !${NC}"
elif curl -f -s "http://$DOMAIN/" > /dev/null 2>&1; then
    FINAL_URL="http://$DOMAIN"
    echo -e "${GREEN}‚úÖ SITE HTTP ENTI√àREMENT OP√âRATIONNEL !${NC}"
elif curl -f -s "http://localhost/" > /dev/null 2>&1; then
    FINAL_URL="http://localhost"
    echo -e "${YELLOW}‚ö†Ô∏è Site op√©rationnel localement (propagation DNS en cours)${NC}"
else
    echo -e "${RED}‚ùå Site non accessible - V√©rifiez la configuration DNS${NC}"
fi

if [ ! -z "$FINAL_URL" ]; then
    echo -e "${GREEN}   Acc√©dez maintenant √†: $FINAL_URL${NC}"
fi

exit 0