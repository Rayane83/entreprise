#!/bin/bash

#################################################################
# Script de D√©ploiement Complet - Portail Entreprise Flashback Fa
# 
# Ce script :
# 1. Supprime l'ancienne version (cache, build, node_modules)
# 2. Installe les d√©pendances fra√Æches
# 3. Build la nouvelle version
# 4. Red√©marre tous les services
# 5. V√©rifie que tout fonctionne
#
# Usage: ./deploy-complete-application.sh
#################################################################

# Configuration
APP_DIR="/app"
FRONTEND_DIR="$APP_DIR/frontend"
BACKEND_DIR="$APP_DIR/backend"
BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction pour v√©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fonction de nettoyage en cas d'erreur
cleanup_on_error() {
    error "Erreur d√©tect√©e. Arr√™t du script."
    exit 1
}

# Trap pour g√©rer les erreurs
trap cleanup_on_error ERR

#################################################################
# √âTAPE 1: V√âRIFICATIONS PR√âLIMINAIRES
#################################################################

log "üîç V√©rification des pr√©requis..."

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "$FRONTEND_DIR" ] || [ ! -d "$BACKEND_DIR" ]; then
    error "Structure de r√©pertoire invalide. Assurez-vous d'√™tre dans le r√©pertoire racine de l'application."
    exit 1
fi

# V√©rifier que les outils n√©cessaires sont install√©s
if ! command_exists yarn; then
    error "Yarn n'est pas install√©. Installation requise."
    exit 1
fi

if ! command_exists python3; then
    error "Python3 n'est pas install√©. Installation requise."
    exit 1
fi

if ! command_exists supervisorctl; then
    error "Supervisor n'est pas install√©. Installation requise."
    exit 1
fi

success "Tous les pr√©requis sont satisfaits"

#################################################################
# √âTAPE 2: SAUVEGARDE DE S√âCURIT√â
#################################################################

log "üíæ Cr√©ation d'une sauvegarde de s√©curit√©..."

mkdir -p "$BACKUP_DIR"

# Sauvegarder les fichiers de configuration critiques
if [ -f "$FRONTEND_DIR/.env" ]; then
    cp "$FRONTEND_DIR/.env" "$BACKUP_DIR/frontend.env"
fi

if [ -f "$BACKEND_DIR/.env" ]; then
    cp "$BACKEND_DIR/.env" "$BACKEND_DIR/backend.env"
fi

# Sauvegarder package.json et requirements.txt
cp "$FRONTEND_DIR/package.json" "$BACKUP_DIR/" 2>/dev/null || true
cp "$BACKEND_DIR/requirements.txt" "$BACKUP_DIR/" 2>/dev/null || true

success "Sauvegarde cr√©√©e dans $BACKUP_DIR"

#################################################################
# √âTAPE 3: ARR√äT DES SERVICES
#################################################################

log "üõë Arr√™t des services..."

sudo supervisorctl stop all
sleep 2

# V√©rifier que les services sont bien arr√™t√©s
if sudo supervisorctl status | grep -q "RUNNING"; then
    warning "Certains services sont encore en cours d'ex√©cution"
    sudo supervisorctl stop all
    sleep 3
fi

success "Tous les services sont arr√™t√©s"

#################################################################
# √âTAPE 4: NETTOYAGE DE L'ANCIENNE VERSION
#################################################################

log "üßπ Nettoyage de l'ancienne version..."

# Nettoyage Frontend
cd "$FRONTEND_DIR"

log "Suppression du cache et build frontend..."
rm -rf node_modules
rm -rf build
rm -rf dist
rm -rf .next
rm -rf .cache
rm -rf .parcel-cache
rm -f yarn-error.log
rm -f npm-debug.log*
rm -f package-lock.json

# Nettoyage des caches yarn et npm
yarn cache clean --force 2>/dev/null || true
npm cache clean --force 2>/dev/null || true

success "Frontend nettoy√©"

# Nettoyage Backend
cd "$BACKEND_DIR"

log "Suppression du cache backend..."
rm -rf __pycache__
rm -rf *.pyc
rm -rf .pytest_cache
rm -rf *.egg-info
find . -name "*.pyc" -delete
find . -name "__pycache__" -delete

# Nettoyage cache pip
pip cache purge 2>/dev/null || true

success "Backend nettoy√©"

#################################################################
# √âTAPE 5: INSTALLATION DES D√âPENDANCES FRONTEND
#################################################################

log "üì¶ Installation des d√©pendances frontend..."

cd "$FRONTEND_DIR"

# Installation avec yarn (comme sp√©cifi√© dans les consignes)
log "Installation avec yarn..."
yarn install --frozen-lockfile --network-timeout 100000

# V√©rifier que les d√©pendances critiques sont install√©es
CRITICAL_DEPS=("react" "react-dom" "react-router-dom" "@radix-ui/react-tabs" "lucide-react" "xlsx" "sonner")

for dep in "${CRITICAL_DEPS[@]}"; do
    if ! yarn list --pattern "$dep" >/dev/null 2>&1; then
        warning "D√©pendance critique '$dep' manquante, installation..."
        yarn add "$dep"
    fi
done

success "D√©pendances frontend install√©es"

#################################################################
# √âTAPE 6: INSTALLATION DES D√âPENDANCES BACKEND
#################################################################

log "üêç Installation des d√©pendances backend..."

cd "$BACKEND_DIR"

# Mise √† jour pip
python3 -m pip install --upgrade pip

# Installation des requirements
if [ -f "requirements.txt" ]; then
    log "Installation des requirements Python..."
    pip install -r requirements.txt
    
    # V√©rifier que FastAPI est install√©
    if ! python3 -c "import fastapi" 2>/dev/null; then
        error "FastAPI n'est pas correctement install√©"
        exit 1
    fi
    
    success "Requirements Python install√©s"
else
    warning "Fichier requirements.txt non trouv√©"
fi

#################################################################
# √âTAPE 7: V√âRIFICATION DES FICHIERS DE CONFIGURATION
#################################################################

log "üîß V√©rification des configurations..."

# V√©rifier les variables d'environnement frontend
if [ -f "$FRONTEND_DIR/.env" ]; then
    if grep -q "REACT_APP_BACKEND_URL" "$FRONTEND_DIR/.env"; then
        success "Configuration frontend OK"
    else
        warning "REACT_APP_BACKEND_URL manquant dans .env frontend"
    fi
else
    warning "Fichier .env frontend manquant"
fi

# V√©rifier les variables d'environnement backend
if [ -f "$BACKEND_DIR/.env" ]; then
    if grep -q "MONGO_URL" "$BACKEND_DIR/.env"; then
        success "Configuration backend OK"
    else
        warning "MONGO_URL manquant dans .env backend"
    fi
else
    warning "Fichier .env backend manquant"
fi

#################################################################
# √âTAPE 8: BUILD DE L'APPLICATION FRONTEND (si n√©cessaire)
#################################################################

cd "$FRONTEND_DIR"

# Pour une application React en d√©veloppement, pas de build n√©cessaire
# Le hot reload sera g√©r√© par le serveur de d√©veloppement
log "Application pr√™te pour le d√©veloppement (hot reload activ√©)"

#################################################################
# √âTAPE 9: RED√âMARRAGE DES SERVICES
#################################################################

log "üöÄ Red√©marrage des services..."

# Red√©marrer tous les services
sudo supervisorctl start all
sleep 3

# V√©rifier le statut des services
log "V√©rification du statut des services..."
sudo supervisorctl status

# Attendre que les services soient compl√®tement d√©marr√©s
log "Attente du d√©marrage complet des services..."
sleep 5

#################################################################
# √âTAPE 10: V√âRIFICATIONS POST-D√âPLOIEMENT
#################################################################

log "‚úÖ V√©rifications post-d√©ploiement..."

# V√©rifier que le backend r√©pond
BACKEND_URL="http://localhost:8001"
if curl -f -s "$BACKEND_URL/health" >/dev/null 2>&1; then
    success "Backend op√©rationnel sur $BACKEND_URL"
else
    # Essayer l'endpoint par d√©faut
    if curl -f -s "$BACKEND_URL/" >/dev/null 2>&1; then
        success "Backend op√©rationnel sur $BACKEND_URL"
    else
        warning "Backend ne r√©pond pas sur $BACKEND_URL"
    fi
fi

# V√©rifier que le frontend r√©pond
FRONTEND_URL="http://localhost:3000"
if curl -f -s "$FRONTEND_URL" >/dev/null 2>&1; then
    success "Frontend op√©rationnel sur $FRONTEND_URL"
else
    warning "Frontend ne r√©pond pas sur $FRONTEND_URL"
fi

# V√©rifier l'utilisation des ressources
log "√âtat des ressources syst√®me:"
echo "M√©moire:"
free -h
echo
echo "Processeur:"
top -bn1 | grep "Cpu(s)" | head -1
echo

#################################################################
# √âTAPE 11: R√âSUM√â ET CONSEILS
#################################################################

log "üìã R√©sum√© du d√©ploiement..."

success "‚úÖ D√©ploiement termin√© avec succ√®s !"

echo
echo "üåê URLs d'acc√®s:"
echo "   Frontend: http://localhost:3000"
echo "   Backend:  http://localhost:8001"
echo
echo "üìÅ Sauvegarde cr√©√©e dans: $BACKUP_DIR"
echo
echo "üîß Commandes utiles:"
echo "   Statut services:     sudo supervisorctl status"
echo "   Red√©marrer tout:     sudo supervisorctl restart all"
echo "   Logs frontend:       sudo supervisorctl tail -f frontend"
echo "   Logs backend:        sudo supervisorctl tail -f backend"
echo
echo "üìù Notes importantes:"
echo "   ‚Ä¢ L'application utilise le hot reload en d√©veloppement"
echo "   ‚Ä¢ Les changements de code sont automatiquement d√©tect√©s"
echo "   ‚Ä¢ Utilisez 'yarn' pour toute installation de d√©pendance (pas npm)"
echo "   ‚Ä¢ Les variables d'environnement sont pr√©serv√©es"
echo

# Afficher les logs r√©cents en cas de probl√®me
if sudo supervisorctl status | grep -q "FATAL\|EXITED"; then
    warning "Certains services ont des probl√®mes. Logs r√©cents:"
    echo "--- LOGS BACKEND ---"
    sudo supervisorctl tail backend
    echo
    echo "--- LOGS FRONTEND ---"
    sudo supervisorctl tail frontend
fi

success "D√©ploiement complet termin√© ! üéâ"

# Optionnel: Ouvrir l'application dans le navigateur
# if command_exists xdg-open; then
#     xdg-open http://localhost:3000
# elif command_exists open; then
#     open http://localhost:3000
# fi